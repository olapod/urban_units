!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=1)}([function(module,exports){eval('function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanM/NzAzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0IsMkVBQTJFLG9DQUFvQyxtQkFBbUIsR0FBRyxFQUFFLE9BQU8sb0NBQW9DLDhIQUE4SCxHQUFHLEVBQUUsc0JBQXNCOztBQUVuVztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/logic/UnitsContainer.js\nfunction convert_urban_units(urban_units) {\n  //SFORMATOWANIE BAZY JEDNOSTEK URBANISTYCZNYCH\n  //dzielenie stringa urban_units[i].ULICA\n  //tworzenie poprawionej tablicy z obiektami bazy\n  var streets = [];\n  var numbers = [];\n  var streets2 = []; //czyszczenie bazy z pustych rekordów\n\n  for (var i = 0; i < urban_units.length; i++) {\n    if (urban_units[i].JEDNOSTKA_URBANISTYCZNA === undefined) {\n      urban_units.splice(i, 1);\n    }\n  } //tworzenie tablicy z samymi nazwami ulic\n\n\n  for (var key in urban_units) {\n    if (urban_units[key].ULICA) {\n      streets.push(urban_units[key].ULICA);\n    }\n  }\n\n  ; //usunięcie zbędnych spacji i zamiana nazw na małe litery, usunięcie opisów dot. numerów\n\n  for (var i = 0; i < streets.length; i++) {\n    // streets[i] = streets[i].replace(/(?<=([A-ZŻŹĆĄŚĘŁÓŃ][a-zżźćńółęąś]*))((\\s\\d|\\sparzyste|\\snieparzyste|\\sza wyjątkiem).*)/g, '');\n    streets2[i] = streets[i].match(/.+?(?=\\sparzyste|\\snieparzyste|\\sza wyjątkiem|\\s\\d+\\-|\\s\\d+,|\\s\\d+$|\\s\\d+\\D,)|.*/).join();\n    streets2[i] = streets2[i].trim();\n    streets2[i] = streets2[i].replace(/\\s{2,}/g, ' ');\n    streets2[i] = streets2[i].toLowerCase();\n  } //tworzenie tablicy z samymi numerami (bez liter np.1a)\n  // numbers = urban_units.map(unit => (unit.ULICA.replace(/(?<=\\d)[^\\d,\\-]/gi, \"\")));\n\n\n  numbers = urban_units.map(function (unit) {\n    return unit.ULICA;\n  }); //tworzenie tablicy z samymi numerami\n\n  for (var i = 0; i < numbers.length; i++) {\n    // numbers[i] = numbers[i].match(/(?<=([A-ZŻŹĆĄŚĘŁÓŃ][a-zżźćńółęąś]*\\s))((\\d|parzyste|nieparzyste|za wyjątkiem).*)/g);\n    numbers[i] = numbers[i].replace(/.+?(?=parzyste|nieparzyste|za wyjątkiem|\\d+\\-|\\d+,|\\d+$|\\d+\\D,)|.*/, '');\n    numbers[i] = numbers[i].replace(/[\\D]+(?=\\-|$|,)/g, \"\");\n  } //Przerobienie w tablicę ze stringami i infinity\n\n\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers[i] === '') {\n      numbers[i] = Number.POSITIVE_INFINITY;\n    }\n  }\n\n  ; //Funkcja konwersji stringa z zakresem numerów na same numery\n\n  function convertRangeToNumbers(str) {\n    function range(start, end) {\n      return new Array(end - start + 1).fill(undefined).map(function (_, i) {\n        return i + start;\n      });\n    } //parzyste i nieparzyste z zakresem liczb\n\n\n    if (str.match(/^parzyste:\\s\\d+-\\d+,\\snieparzyste:\\s\\d+-\\d+/g)) {\n      var even = str.match(/[\\d\\-]+(?=,\\s)/g);\n      var odd = str.match(/\\d+\\-\\d+$/g);\n      var even_start = even[0].match(/^\\d+/g);\n      var even_s = even_start.map(function (e) {\n        return parseInt(e);\n      });\n      var even_end = even[0].match(/[\\d]+$/g);\n      var even_e = even_end.map(function (e) {\n        return parseInt(e);\n      });\n      var odd_start = odd[0].match(/^\\d+/g);\n      var odd_s = odd_start.map(function (e) {\n        return parseInt(e);\n      });\n      var odd_end = odd[0].match(/[\\d]+$/g);\n      var odd_e = odd_end.map(function (e) {\n        return parseInt(e);\n      });\n      var even_result = range(even_s[0], even_e[0]);\n      var odd_result = range(odd_s[0], odd_e[0]); //dzielę na zbiory parzyste i nieparzyste\n\n      var evens = [];\n      var odds = [];\n\n      for (var i = 0; i < even_result.length; i++) {\n        if (even_result[i] % 2 != 1) {\n          evens.push(even_result[i]);\n        }\n      }\n\n      for (var i = 0; i < odd_result.length; i++) {\n        if (odd_result[i] % 2 == 1) {\n          odds.push(odd_result[i]);\n        }\n      }\n\n      odds.toString();\n      evens.toString();\n      var result = evens + ',' + odds;\n      str = str.replace(/^parzyste.*/g, result);\n      var strToNumber = str.split(',').map(Number);\n      return strToNumber;\n    } //sam zakres liczb bez podziału na parzyste i nieparzyste\n\n\n    if (str.match(/^\\d+\\-\\d+/g)) {\n      var num = str.match(/^\\d+\\-\\d+/g);\n      var num_start = num[0].match(/^\\d+/g);\n      var num_s = num_start.map(function (e) {\n        return parseInt(e);\n      });\n      var num_end = num[0].match(/[\\d]+$/g);\n      var num_e = num_end.map(function (e) {\n        return parseInt(e);\n      });\n      var result = range(num_s[0], num_e[0]);\n      result.toString();\n      str = str.replace(/^\\d+\\-\\d+/g, result);\n      var strToNumber = str.split(',').map(Number);\n      return strToNumber;\n    } //same liczby po przecinku\n\n\n    if (str.match(/^[0-9,\\s]+$/g)) {\n      var strToNumber = str.split(',').map(Number);\n      return strToNumber;\n    } //same parzyste z zakresem\n\n\n    if (str.match(/^parzyste: \\d+\\-\\d+$/g)) {\n      var even = str.match(/\\d+\\-\\d+$/g);\n      var even_start = even[0].match(/^\\d+/g);\n      var even_s = even_start.map(function (e) {\n        return parseInt(e);\n      });\n      var even_end = even[0].match(/[\\d]+$/g);\n      var even_e = even_end.map(function (e) {\n        return parseInt(e);\n      });\n      var even_result = range(even_s[0], even_e[0]); //dzielę na zbiory nieparzyste\n\n      var evens = [];\n\n      for (var i = 0; i < even_result.length; i++) {\n        if (even_result[i] % 2 != 1) {\n          evens.push(even_result[i]);\n        }\n      }\n\n      var result = evens.toString();\n      str = str.replace(/^parzyste.*/g, result);\n      var strToNumber = str.split(',').map(Number);\n      return strToNumber;\n    } //same nieparzyste z zakresem\n\n\n    if (str.match(/^nieparzyste: \\d+\\-\\d+$/g)) {\n      var odd = str.match(/\\d+\\-\\d+$/g);\n      var odd_start = odd[0].match(/^\\d+/g);\n      var odd_s = odd_start.map(function (e) {\n        return parseInt(e);\n      });\n      var odd_end = odd[0].match(/[\\d]+$/g);\n      var odd_e = odd_end.map(function (e) {\n        return parseInt(e);\n      });\n      var odd_result = range(odd_s[0], odd_e[0]); //dzielę na zbiory nieparzyste\n\n      var odds = [];\n\n      for (var i = 0; i < odd_result.length; i++) {\n        if (odd_result[i] % 2 == 1) {\n          odds.push(odd_result[i]);\n        }\n      }\n\n      var result = odds.toString();\n      str = str.replace(/^nieparzyste.*/g, result);\n      var strToNumber = str.split(',').map(Number);\n      return strToNumber;\n    } //za wyjątkiem\n\n\n    if (str.match(/^za wyjątkiem/g)) {\n      var exception = str.match(/\\d.*/g);\n      exception = exception[0].split(',').map(Number);\n      var numbers = {\n        no: Number.POSITIVE_INFINITY,\n        exception: exception\n      };\n      return numbers;\n    } else {\n      console.log('Błędny format zapisu w bazie jednostek urbanistycznych: ', str);\n    }\n  } //gotowa tablica z numerami\n\n\n  var fixedNumbers = [];\n\n  for (var i = 0; i < numbers.length; i++) {\n    if (typeof numbers[i] === 'string') {\n      fixedNumbers.push(convertRangeToNumbers(numbers[i]));\n    } else {\n      fixedNumbers.push(numbers[i]);\n    }\n  }\n\n  ; //GOTOWA BAZA JEDNOSTEK URBANISTYCZNYCH\n\n  var fixed_units = urban_units.map(function (_ref) {\n    var DZIELNICA = _ref.DZIELNICA,\n        JEDNOSTKA_URBANISTYCZNA = _ref.JEDNOSTKA_URBANISTYCZNA,\n        NR_PAD = _ref.NR_PAD,\n        ID = _ref.ID;\n    return {\n      DZIELNICA: DZIELNICA,\n      JEDNOSTKA_URBANISTYCZNA: JEDNOSTKA_URBANISTYCZNA,\n      NR_PAD: NR_PAD,\n      ID: ID\n    };\n  });\n\n  for (var i = 0; i < fixed_units.length; i++) {\n    fixed_units[i].ULICA = streets2[i];\n    fixed_units[i].NUMERY = fixedNumbers[i];\n  }\n\n  return fixed_units;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\nvar helpers_typeof = __webpack_require__(0);\nvar typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);\n\n// CONCATENATED MODULE: ./src/logic/DatabaseContainer.js\n\n\nvar DatabaseContainer_compare_databases = function compare_databases(database, fixed_units) {\n  //przygotowanie danych do porównania\n  //zamiana stringa z numerem na numer\n  for (var i = 0; i < database.length; i++) {\n    if (database[i].numer && database[i].numer.match(/^\\d+/gi)) {\n      database[i].numer = database[i].numer.match(/^\\d+/gi);\n      database[i].numer = parseInt(database[i].numer);\n    }\n  } //usunucięcie zbędnych spacji i zamiana nazw na małe litery\n\n\n  for (var i = 0; i < database.length; i++) {\n    if (database[i].ulica) {\n      database[i].ulica = database[i].ulica.trim();\n      database[i].ulica = database[i].ulica.replace(/\\s{2,}/g, ' ');\n      database[i].ulica = database[i].ulica.toLowerCase();\n    }\n  } //porównanie obu baz i przypisanie do databaseu jednostki urbanistycznej;\n\n\n  for (var k = 0; k < database.length; k++) {\n    for (var i = 0; i < fixed_units.length; i++) {\n      if (fixed_units[i].ULICA === database[k].ulica && (fixed_units[i].NUMERY === Infinity || Array.isArray(fixed_units[i].NUMERY) && fixed_units[i].NUMERY.includes(database[k].numer) || typeof_default()(fixed_units[i].NUMERY) === 'object' && fixed_units[i].NUMERY.no === Infinity && !fixed_units[i].NUMERY.exception.includes(database[k].numer) || database[k].numer === null)) {\n        database[k].jednostka = fixed_units[i].JEDNOSTKA_URBANISTYCZNA;\n      }\n    }\n  }\n\n  return database;\n};\n\n/* harmony default export */ var DatabaseContainer = (DatabaseContainer_compare_databases);\n// CONCATENATED MODULE: ./src/logic/SummaryContainer.js\nvar get_summary = function get_summary(database, units) {\n  var summary = [];\n\n  for (var i = 1; i < 89; i++) {\n    var unit_summary = database.filter(function (item) {\n      return item.jednostka == i;\n    }).length; // unit_summary.toString();\n\n    var district = units.find(function (item) {\n      return item.JEDNOSTKA_URBANISTYCZNA == i;\n    }).DZIELNICA; // i.toString();\n\n    summary.push({\n      id: i,\n      count: unit_summary,\n      district: district\n    });\n  }\n\n  ;\n  return summary;\n};\n\n/* harmony default export */ var SummaryContainer = (get_summary);\n// CONCATENATED MODULE: ./src/logic/ProblemUnitsContainer.js\nvar get_problem_units = function get_problem_units(database) {\n  var problem_units = [];\n\n  for (var i = 0; i < database.length; i++) {\n    if (!database[i].jednostka) {\n      problem_units.push(database[i]);\n    }\n  }\n\n  return problem_units;\n};\n\n/* harmony default export */ var ProblemUnitsContainer = (get_problem_units);\n// CONCATENATED MODULE: ./src/file.worker.js\n\r\n\r\n\r\n\r\n\r\n  self.addEventListener('message', e => { // eslint-disable-line no-restricted-globals\r\n      if (!e) return;\r\n      const units = e.data.urban_units;\r\n      const data = e.data.database;\r\n      const converted_units = convert_urban_units(units);\r\n      const compared_databases = DatabaseContainer(data, converted_units);\r\n      const summary = SummaryContainer(compared_databases, converted_units);\r\n      const problem_units = ProblemUnitsContainer(compared_databases);\r\n\r\n    postMessage({ compared_databases: compared_databases,\r\n                  converted_units: converted_units,\r\n                  summary: summary,\r\n                  problem_units: problem_units,\r\n                  loading: false,\r\n                  error: false\r\n    });\r\n  });\r\n\r\n  self.onerror = function (e) {\r\n    console.log(e);\r\n    postMessage({ error: true\r\n   });\r\n  };\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")}]);